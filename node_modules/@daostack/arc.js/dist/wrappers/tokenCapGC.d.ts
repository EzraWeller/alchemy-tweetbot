import { Address, Hash } from "../commonTypes";
import { ContractWrapperBase } from "../contractWrapperBase";
import { ArcTransactionDataResult, IContractWrapperFactory } from "../iContractWrapperBase";
import BigNumber from "bignumber.js";
import { ContractWrapperFactory } from "../contractWrapperFactory";
import { TxGeneratingFunctionOptions } from "../transactionService";
export declare class TokenCapGCWrapper extends ContractWrapperBase {
    name: string;
    friendlyName: string;
    factory: IContractWrapperFactory<TokenCapGCWrapper>;
    getParametersHash(params: TokenCapGcParams): Promise<Hash>;
    setParameters(params: TokenCapGcParams & TxGeneratingFunctionOptions): Promise<ArcTransactionDataResult<Hash>>;
    getParameters(paramsHash: Hash): Promise<any>;
    getSchemeParametersHash(avatarAddress: Address): Promise<Hash>;
    getSchemeParameters(avatarAddress: Address): Promise<GetTokenCapGcParamsResult>;
}
export declare const TokenCapGCFactory: ContractWrapperFactory<TokenCapGCWrapper>;
export interface TokenCapGcParams {
    cap: BigNumber | string;
    token: Address;
}
export interface GetTokenCapGcParamsResult {
    cap: BigNumber;
    token: Address;
}
