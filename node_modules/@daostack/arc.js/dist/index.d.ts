/// <reference path="../custom_typings/web3.d.ts" />
export * from "./accountService";
export * from "./avatarService";
export * from "./commonTypes";
export * from "./configService";
export { ContractWrappers, ContractWrapperFactories, ContractWrappersByType, ContractWrappersByAddress } from "./wrapperService";
export * from "./wrapperService";
export * from "./wrappers/absoluteVote";
export * from "./wrappers/commonEventInterfaces";
export * from "./wrappers/contributionReward";
export * from "./wrappers/daoCreator";
export * from "./wrappers/daoToken";
export * from "./wrappers/genesisProtocol";
export * from "./wrappers/globalConstraintRegistrar";
export * from "./wrappers/iBurnableToken";
export * from "./wrappers/iErc827Token";
export * from "./iConfigService";
export * from "./wrappers/iIntVoteInterface";
export * from "./wrappers/intVoteInterface";
export * from "./wrappers/mintableToken";
export * from "./wrappers/redeemer";
export * from "./wrappers/reputation";
export * from "./wrappers/schemeRegistrar";
export * from "./wrappers/standardToken";
export * from "./wrappers/tokenCapGC";
export * from "./wrappers/upgradeScheme";
export * from "./wrappers/vestingScheme";
export * from "./wrappers/voteInOrganizationScheme";
export * from "./iContractWrapperBase";
export * from "./dao";
export * from "./contractWrapperBase";
export * from "./contractWrapperFactory";
export * from "./pubSubEventService";
export * from "./web3EventService";
export * from "./proposalService";
export * from "./proposalGeneratorBase";
export * from "./loggingService";
export * from "./transactionService";
export * from "./utils";
export declare const computeForgeOrgGasLimit: any;
import { Web3 } from "web3";
import { WrapperServiceInitializeOptions } from "./wrapperService";
/**
 * Options for [InitializeArcJs](/api/README/#initializearcjs)
 */
export interface InitializeArcOptions extends WrapperServiceInitializeOptions {
    /**
     * Name of the network for which to use the defaults found in Arc.js/truffle.js.
     * Overwrites config settings network, providerUrl and providerPort.
     */
    useNetworkDefaultsFor?: string;
    /**
     * Set to true to watch for changes in the current user account.
     * Default is false.  See [AccountService.initiateAccountWatch](/api/classes/AccountService#initiateAccountWatch).
     */
    watchForAccountChanges?: boolean;
}
/**
 * You must call `InitializeArcJs` before doing anything else with Arc.js.
 * Call it again whenever the current chain changes.
 * @returns Promise of the `Web3` object for the current chain.
 */
export declare function InitializeArcJs(options?: InitializeArcOptions): Promise<Web3>;
